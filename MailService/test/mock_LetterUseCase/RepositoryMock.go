// Code generated by MockGen. DO NOT EDIT.
// Source: ./LetterRepository.go

// Package mock_UseCase is a generated GoMock package.
package mock_LetterUseCase

import (
	Model "MailService/internal/Model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetLettersSendDir mocks base method
func (m *MockInterface) GetLettersSendDir(dir uint64) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersSendDir", dir)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersSendDir indicates an expected call of GetLettersSendDir
func (mr *MockInterfaceMockRecorder) GetLettersSendDir(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersSendDir", reflect.TypeOf((*MockInterface)(nil).GetLettersSendDir), dir)
}

// GetLettersRecvDir mocks base method
func (m *MockInterface) GetLettersRecvDir(dir uint64) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersRecvDir", dir)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersRecvDir indicates an expected call of GetLettersRecvDir
func (mr *MockInterfaceMockRecorder) GetLettersRecvDir(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersRecvDir", reflect.TypeOf((*MockInterface)(nil).GetLettersRecvDir), dir)
}

// GetLettersSend mocks base method
func (m *MockInterface) GetLettersSend(email string) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersSend", email)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersSend indicates an expected call of GetLettersSend
func (mr *MockInterfaceMockRecorder) GetLettersSend(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersSend", reflect.TypeOf((*MockInterface)(nil).GetLettersSend), email)
}

// GetLettersRecv mocks base method
func (m *MockInterface) GetLettersRecv(email string) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersRecv", email)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersRecv indicates an expected call of GetLettersRecv
func (mr *MockInterfaceMockRecorder) GetLettersRecv(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersRecv", reflect.TypeOf((*MockInterface)(nil).GetLettersRecv), email)
}

// SaveLetter mocks base method
func (m *MockInterface) SaveLetter(letter Model.Letter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLetter", letter)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLetter indicates an expected call of SaveLetter
func (mr *MockInterfaceMockRecorder) SaveLetter(letter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLetter", reflect.TypeOf((*MockInterface)(nil).SaveLetter), letter)
}

// WatchLetter mocks base method
func (m *MockInterface) WatchLetter(lid uint64) (error, Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLetter", lid)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(Model.Letter)
	return ret0, ret1
}

// WatchLetter indicates an expected call of WatchLetter
func (mr *MockInterfaceMockRecorder) WatchLetter(lid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLetter", reflect.TypeOf((*MockInterface)(nil).WatchLetter), lid)
}

// AddLetterToDir mocks base method
func (m *MockInterface) AddLetterToDir(arg0, arg1 uint64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLetterToDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLetterToDir indicates an expected call of AddLetterToDir
func (mr *MockInterfaceMockRecorder) AddLetterToDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLetterToDir", reflect.TypeOf((*MockInterface)(nil).AddLetterToDir), arg0, arg1, arg2)
}

// RemoveLetterFromDir mocks base method
func (m *MockInterface) RemoveLetterFromDir(arg0, arg1 uint64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLetterFromDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLetterFromDir indicates an expected call of RemoveLetterFromDir
func (mr *MockInterfaceMockRecorder) RemoveLetterFromDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLetterFromDir", reflect.TypeOf((*MockInterface)(nil).RemoveLetterFromDir), arg0, arg1, arg2)
}

// RemoveDir mocks base method
func (m *MockInterface) RemoveDir(arg0 uint64, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDir indicates an expected call of RemoveDir
func (mr *MockInterfaceMockRecorder) RemoveDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDir", reflect.TypeOf((*MockInterface)(nil).RemoveDir), arg0, arg1)
}
