// Code generated by MockGen. DO NOT EDIT.
// Source: ./LetterRepository.go

// Package mock_Repository is a generated GoMock package.
package mock_Repository

import (
	Model "Mailer/MailService/internal/Model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLetterDB is a mock of LetterDB interface
type MockLetterDB struct {
	ctrl     *gomock.Controller
	recorder *MockLetterDBMockRecorder
}

// MockLetterDBMockRecorder is the mock recorder for MockLetterDB
type MockLetterDBMockRecorder struct {
	mock *MockLetterDB
}

// NewMockLetterDB creates a new mock instance
func NewMockLetterDB(ctrl *gomock.Controller) *MockLetterDB {
	mock := &MockLetterDB{ctrl: ctrl}
	mock.recorder = &MockLetterDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLetterDB) EXPECT() *MockLetterDBMockRecorder {
	return m.recorder
}

// SaveMail mocks base method
func (m *MockLetterDB) SaveMail(arg0 Model.Letter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMail indicates an expected call of SaveMail
func (mr *MockLetterDBMockRecorder) SaveMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMail", reflect.TypeOf((*MockLetterDB)(nil).SaveMail), arg0)
}

// GenerateLID mocks base method
func (m *MockLetterDB) GenerateLID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateLID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GenerateLID indicates an expected call of GenerateLID
func (mr *MockLetterDBMockRecorder) GenerateLID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLID", reflect.TypeOf((*MockLetterDB)(nil).GenerateLID))
}

// SetLetterWatched mocks base method
func (m *MockLetterDB) SetLetterWatched(arg0 uint64) (error, Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLetterWatched", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(Model.Letter)
	return ret0, ret1
}

// SetLetterWatched indicates an expected call of SetLetterWatched
func (mr *MockLetterDBMockRecorder) SetLetterWatched(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLetterWatched", reflect.TypeOf((*MockLetterDB)(nil).SetLetterWatched), arg0)
}

// GetLetterByLid mocks base method
func (m *MockLetterDB) GetLetterByLid(arg0 uint64) (error, Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLetterByLid", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(Model.Letter)
	return ret0, ret1
}

// GetLetterByLid indicates an expected call of GetLetterByLid
func (mr *MockLetterDBMockRecorder) GetLetterByLid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetterByLid", reflect.TypeOf((*MockLetterDB)(nil).GetLetterByLid), arg0)
}

// GetLettersRecvDir mocks base method
func (m *MockLetterDB) GetLettersRecvDir(arg0, arg1, arg2 uint64) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersRecvDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersRecvDir indicates an expected call of GetLettersRecvDir
func (mr *MockLetterDBMockRecorder) GetLettersRecvDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersRecvDir", reflect.TypeOf((*MockLetterDB)(nil).GetLettersRecvDir), arg0, arg1, arg2)
}

// GetLettersSentDir mocks base method
func (m *MockLetterDB) GetLettersSentDir(arg0 uint64) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersSentDir", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersSentDir indicates an expected call of GetLettersSentDir
func (mr *MockLetterDBMockRecorder) GetLettersSentDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersSentDir", reflect.TypeOf((*MockLetterDB)(nil).GetLettersSentDir), arg0)
}

// GetLettersRecv mocks base method
func (m *MockLetterDB) GetLettersRecv(arg0 string, arg1, arg2 uint64) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersRecv", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersRecv indicates an expected call of GetLettersRecv
func (mr *MockLetterDBMockRecorder) GetLettersRecv(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersRecv", reflect.TypeOf((*MockLetterDB)(nil).GetLettersRecv), arg0, arg1, arg2)
}

// GetLettersSent mocks base method
func (m *MockLetterDB) GetLettersSent(arg0 string, arg1, arg2 uint64) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersSent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersSent indicates an expected call of GetLettersSent
func (mr *MockLetterDBMockRecorder) GetLettersSent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersSent", reflect.TypeOf((*MockLetterDB)(nil).GetLettersSent), arg0, arg1, arg2)
}

// GetLettersByFolder mocks base method
func (m *MockLetterDB) GetLettersByFolder(arg0 uint64) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLettersByFolder", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLettersByFolder indicates an expected call of GetLettersByFolder
func (mr *MockLetterDBMockRecorder) GetLettersByFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLettersByFolder", reflect.TypeOf((*MockLetterDB)(nil).GetLettersByFolder), arg0)
}

// AddLetterToDir mocks base method
func (m *MockLetterDB) AddLetterToDir(arg0, arg1 uint64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLetterToDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLetterToDir indicates an expected call of AddLetterToDir
func (mr *MockLetterDBMockRecorder) AddLetterToDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLetterToDir", reflect.TypeOf((*MockLetterDB)(nil).AddLetterToDir), arg0, arg1, arg2)
}

// RemoveLetterFromDir mocks base method
func (m *MockLetterDB) RemoveLetterFromDir(arg0, arg1 uint64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLetterFromDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLetterFromDir indicates an expected call of RemoveLetterFromDir
func (mr *MockLetterDBMockRecorder) RemoveLetterFromDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLetterFromDir", reflect.TypeOf((*MockLetterDB)(nil).RemoveLetterFromDir), arg0, arg1, arg2)
}

// RemoveDir mocks base method
func (m *MockLetterDB) RemoveDir(arg0 uint64, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDir indicates an expected call of RemoveDir
func (mr *MockLetterDBMockRecorder) RemoveDir(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDir", reflect.TypeOf((*MockLetterDB)(nil).RemoveDir), arg0, arg1)
}

// RemoveLetter mocks base method
func (m *MockLetterDB) RemoveLetter(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLetter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLetter indicates an expected call of RemoveLetter
func (mr *MockLetterDBMockRecorder) RemoveLetter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLetter", reflect.TypeOf((*MockLetterDB)(nil).RemoveLetter), arg0)
}

// FindSender mocks base method
func (m *MockLetterDB) FindSender(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSender", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSender indicates an expected call of FindSender
func (mr *MockLetterDBMockRecorder) FindSender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSender", reflect.TypeOf((*MockLetterDB)(nil).FindSender), arg0, arg1)
}

// FindReceiver mocks base method
func (m *MockLetterDB) FindReceiver(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReceiver", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReceiver indicates an expected call of FindReceiver
func (mr *MockLetterDBMockRecorder) FindReceiver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReceiver", reflect.TypeOf((*MockLetterDB)(nil).FindReceiver), arg0, arg1)
}

// FindTheme mocks base method
func (m *MockLetterDB) FindTheme(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTheme", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTheme indicates an expected call of FindTheme
func (mr *MockLetterDBMockRecorder) FindTheme(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTheme", reflect.TypeOf((*MockLetterDB)(nil).FindTheme), arg0, arg1)
}

// FindText mocks base method
func (m *MockLetterDB) FindText(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindText", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindText indicates an expected call of FindText
func (mr *MockLetterDBMockRecorder) FindText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindText", reflect.TypeOf((*MockLetterDB)(nil).FindText), arg0, arg1)
}

// GetLetterByTheme mocks base method
func (m *MockLetterDB) GetLetterByTheme(arg0 string) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLetterByTheme", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLetterByTheme indicates an expected call of GetLetterByTheme
func (mr *MockLetterDBMockRecorder) GetLetterByTheme(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetterByTheme", reflect.TypeOf((*MockLetterDB)(nil).GetLetterByTheme), arg0)
}

// GetLetterByText mocks base method
func (m *MockLetterDB) GetLetterByText(arg0 string) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLetterByText", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLetterByText indicates an expected call of GetLetterByText
func (mr *MockLetterDBMockRecorder) GetLetterByText(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetterByText", reflect.TypeOf((*MockLetterDB)(nil).GetLetterByText), arg0)
}

// GetLetterBySender mocks base method
func (m *MockLetterDB) GetLetterBySender(arg0 string) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLetterBySender", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLetterBySender indicates an expected call of GetLetterBySender
func (mr *MockLetterDBMockRecorder) GetLetterBySender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetterBySender", reflect.TypeOf((*MockLetterDB)(nil).GetLetterBySender), arg0)
}

// GetLetterByReceiver mocks base method
func (m *MockLetterDB) GetLetterByReceiver(arg0 string) (error, []Model.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLetterByReceiver", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]Model.Letter)
	return ret0, ret1
}

// GetLetterByReceiver indicates an expected call of GetLetterByReceiver
func (mr *MockLetterDBMockRecorder) GetLetterByReceiver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetterByReceiver", reflect.TypeOf((*MockLetterDB)(nil).GetLetterByReceiver), arg0)
}
