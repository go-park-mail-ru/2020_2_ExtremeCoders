// Code generated by MockGen. DO NOT EDIT.
// Source: ./User.go

// Package mock_UserDelivery is a generated GoMock package.
package mock_UserDelivery

import (
	UserModel "Mailer/MainApplication/internal/User/UserModel"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Session mocks base method
func (m *MockInterface) Session(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Session", w, r)
}

// Session indicates an expected call of Session
func (mr *MockInterfaceMockRecorder) Session(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockInterface)(nil).Session), w, r)
}

// Signup mocks base method
func (m *MockInterface) Signup(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signup", w, r)
}

// Signup indicates an expected call of Signup
func (mr *MockInterfaceMockRecorder) Signup(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockInterface)(nil).Signup), w, r)
}

// SignIn mocks base method
func (m *MockInterface) SignIn(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignIn", w, r)
}

// SignIn indicates an expected call of SignIn
func (mr *MockInterfaceMockRecorder) SignIn(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockInterface)(nil).SignIn), w, r)
}

// GetUserByRequest mocks base method
func (m *MockInterface) GetUserByRequest(r *http.Request) (*UserModel.User, *http.Cookie, uint16) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByRequest", r)
	ret0, _ := ret[0].(*UserModel.User)
	ret1, _ := ret[1].(*http.Cookie)
	ret2, _ := ret[2].(uint16)
	return ret0, ret1, ret2
}

// GetUserByRequest indicates an expected call of GetUserByRequest
func (mr *MockInterfaceMockRecorder) GetUserByRequest(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByRequest", reflect.TypeOf((*MockInterface)(nil).GetUserByRequest), r)
}

// Profile mocks base method
func (m *MockInterface) Profile(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Profile", w, r)
}

// Profile indicates an expected call of Profile
func (mr *MockInterfaceMockRecorder) Profile(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockInterface)(nil).Profile), w, r)
}

// Logout mocks base method
func (m *MockInterface) Logout(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", w, r)
}

// Logout indicates an expected call of Logout
func (mr *MockInterfaceMockRecorder) Logout(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockInterface)(nil).Logout), w, r)
}

// LoadFile mocks base method
func (m *MockInterface) LoadFile(user *UserModel.User, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadFile", user, r)
}

// LoadFile indicates an expected call of LoadFile
func (mr *MockInterfaceMockRecorder) LoadFile(user, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFile", reflect.TypeOf((*MockInterface)(nil).LoadFile), user, r)
}

// GetAvatar mocks base method
func (m *MockInterface) GetAvatar(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAvatar", w, r)
}

// GetAvatar indicates an expected call of GetAvatar
func (mr *MockInterfaceMockRecorder) GetAvatar(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockInterface)(nil).GetAvatar), w, r)
}
