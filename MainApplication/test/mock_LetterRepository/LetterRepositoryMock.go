// Code generated by MockGen. DO NOT EDIT.
// Source: ./DataBaseRequests.go

// Package mock_LetterRepository is a generated GoMock package.
package mock_LetterRepository

import (
	LetterModel "Mailer/MainApplication/internal/Letter/LetterModel"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLetterDB is a mock of LetterDB interface
type MockLetterDB struct {
	ctrl     *gomock.Controller
	recorder *MockLetterDBMockRecorder
}

// MockLetterDBMockRecorder is the mock recorder for MockLetterDB
type MockLetterDBMockRecorder struct {
	mock *MockLetterDB
}

// NewMockLetterDB creates a new mock instance
func NewMockLetterDB(ctrl *gomock.Controller) *MockLetterDB {
	mock := &MockLetterDB{ctrl: ctrl}
	mock.recorder = &MockLetterDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLetterDB) EXPECT() *MockLetterDBMockRecorder {
	return m.recorder
}

// SaveMail mocks base method
func (m *MockLetterDB) SaveMail(arg0 LetterModel.Letter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMail indicates an expected call of SaveMail
func (mr *MockLetterDBMockRecorder) SaveMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMail", reflect.TypeOf((*MockLetterDB)(nil).SaveMail), arg0)
}

// GetReceivedLetters mocks base method
func (m *MockLetterDB) GetReceivedLetters(arg0 string, arg1, arg2 uint64) (error, []LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedLetters", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]LetterModel.Letter)
	return ret0, ret1
}

// GetReceivedLetters indicates an expected call of GetReceivedLetters
func (mr *MockLetterDBMockRecorder) GetReceivedLetters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedLetters", reflect.TypeOf((*MockLetterDB)(nil).GetReceivedLetters), arg0, arg1, arg2)
}

// GetSendedLetters mocks base method
func (m *MockLetterDB) GetSendedLetters(arg0 string, arg1, arg2 uint64) (error, []LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendedLetters", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]LetterModel.Letter)
	return ret0, ret1
}

// GetSendedLetters indicates an expected call of GetSendedLetters
func (mr *MockLetterDBMockRecorder) GetSendedLetters(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendedLetters", reflect.TypeOf((*MockLetterDB)(nil).GetSendedLetters), arg0, arg1, arg2)
}

// GetReceivedLettersDir mocks base method
func (m *MockLetterDB) GetReceivedLettersDir(arg0, arg1, arg2 uint64) (error, []LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedLettersDir", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]LetterModel.Letter)
	return ret0, ret1
}

// GetReceivedLettersDir indicates an expected call of GetReceivedLettersDir
func (mr *MockLetterDBMockRecorder) GetReceivedLettersDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedLettersDir", reflect.TypeOf((*MockLetterDB)(nil).GetReceivedLettersDir), arg0, arg1, arg2)
}

// GetSendedLettersDir mocks base method
func (m *MockLetterDB) GetSendedLettersDir(arg0 uint64) (error, []LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendedLettersDir", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]LetterModel.Letter)
	return ret0, ret1
}

// GetSendedLettersDir indicates an expected call of GetSendedLettersDir
func (mr *MockLetterDBMockRecorder) GetSendedLettersDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendedLettersDir", reflect.TypeOf((*MockLetterDB)(nil).GetSendedLettersDir), arg0)
}

// WatchLetter mocks base method
func (m *MockLetterDB) WatchLetter(arg0 uint64) (error, LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchLetter", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(LetterModel.Letter)
	return ret0, ret1
}

// WatchLetter indicates an expected call of WatchLetter
func (mr *MockLetterDBMockRecorder) WatchLetter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLetter", reflect.TypeOf((*MockLetterDB)(nil).WatchLetter), arg0)
}

// DeleteLetter mocks base method
func (m *MockLetterDB) DeleteLetter(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLetter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLetter indicates an expected call of DeleteLetter
func (mr *MockLetterDBMockRecorder) DeleteLetter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLetter", reflect.TypeOf((*MockLetterDB)(nil).DeleteLetter), arg0)
}

// FindSimilar mocks base method
func (m *MockLetterDB) FindSimilar(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSimilar", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindSimilar indicates an expected call of FindSimilar
func (mr *MockLetterDBMockRecorder) FindSimilar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSimilar", reflect.TypeOf((*MockLetterDB)(nil).FindSimilar), arg0, arg1)
}

// GetLetterBy mocks base method
func (m *MockLetterDB) GetLetterBy(arg0, arg1, arg2 string) (error, []LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLetterBy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]LetterModel.Letter)
	return ret0, ret1
}

// GetLetterBy indicates an expected call of GetLetterBy
func (mr *MockLetterDBMockRecorder) GetLetterBy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetterBy", reflect.TypeOf((*MockLetterDB)(nil).GetLetterBy), arg0, arg1, arg2)
}

// SetLetterInSpam mocks base method
func (m *MockLetterDB) SetLetterInSpam(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLetterInSpam", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLetterInSpam indicates an expected call of SetLetterInSpam
func (mr *MockLetterDBMockRecorder) SetLetterInSpam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLetterInSpam", reflect.TypeOf((*MockLetterDB)(nil).SetLetterInSpam), arg0)
}

// SetLetterInBox mocks base method
func (m *MockLetterDB) SetLetterInBox(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLetterInBox", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLetterInBox indicates an expected call of SetLetterInBox
func (mr *MockLetterDBMockRecorder) SetLetterInBox(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLetterInBox", reflect.TypeOf((*MockLetterDB)(nil).SetLetterInBox), arg0)
}
