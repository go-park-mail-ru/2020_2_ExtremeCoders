// Code generated by MockGen. DO NOT EDIT.
// Source: ./Letter.go

// Package mock_LetterDelivery is a generated GoMock package.
package mock_LetterDelivery

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// SendLetter mocks base method
func (m *MockInterface) SendLetter(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendLetter", w, r)
}

// SendLetter indicates an expected call of SendLetter
func (mr *MockInterfaceMockRecorder) SendLetter(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLetter", reflect.TypeOf((*MockInterface)(nil).SendLetter), w, r)
}

// GetRecvLetters mocks base method
func (m *MockInterface) GetRecvLetters(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRecvLetters", w, r)
}

// GetRecvLetters indicates an expected call of GetRecvLetters
func (mr *MockInterfaceMockRecorder) GetRecvLetters(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecvLetters", reflect.TypeOf((*MockInterface)(nil).GetRecvLetters), w, r)
}

// GetSendLetters mocks base method
func (m *MockInterface) GetSendLetters(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetSendLetters", w, r)
}

// GetSendLetters indicates an expected call of GetSendLetters
func (mr *MockInterfaceMockRecorder) GetSendLetters(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendLetters", reflect.TypeOf((*MockInterface)(nil).GetSendLetters), w, r)
}

// WatchLetter mocks base method
func (m *MockInterface) WatchLetter(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WatchLetter", w, r)
}

// WatchLetter indicates an expected call of WatchLetter
func (mr *MockInterfaceMockRecorder) WatchLetter(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchLetter", reflect.TypeOf((*MockInterface)(nil).WatchLetter), w, r)
}

// DeleteLetter mocks base method
func (m *MockInterface) DeleteLetter(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteLetter", w, r)
}

// DeleteLetter indicates an expected call of DeleteLetter
func (mr *MockInterfaceMockRecorder) DeleteLetter(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLetter", reflect.TypeOf((*MockInterface)(nil).DeleteLetter), w, r)
}

// Search mocks base method
func (m *MockInterface) Search(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Search", w, r)
}

// Search indicates an expected call of Search
func (mr *MockInterfaceMockRecorder) Search(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockInterface)(nil).Search), w, r)
}

// GetLetterBy mocks base method
func (m *MockInterface) GetLetterBy(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetLetterBy", w, r)
}

// GetLetterBy indicates an expected call of GetLetterBy
func (mr *MockInterfaceMockRecorder) GetLetterBy(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLetterBy", reflect.TypeOf((*MockInterface)(nil).GetLetterBy), w, r)
}

// SetLetterInSpam mocks base method
func (m *MockInterface) SetLetterInSpam(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLetterInSpam", w, r)
}

// SetLetterInSpam indicates an expected call of SetLetterInSpam
func (mr *MockInterfaceMockRecorder) SetLetterInSpam(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLetterInSpam", reflect.TypeOf((*MockInterface)(nil).SetLetterInSpam), w, r)
}

// SetLetterInBox mocks base method
func (m *MockInterface) SetLetterInBox(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLetterInBox", w, r)
}

// SetLetterInBox indicates an expected call of SetLetterInBox
func (mr *MockInterfaceMockRecorder) SetLetterInBox(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLetterInBox", reflect.TypeOf((*MockInterface)(nil).SetLetterInBox), w, r)
}
