// Code generated by MockGen. DO NOT EDIT.
// Source: ./User.go

// Package mock_UserUseCase is a generated GoMock package.
package mock_UserUseCase

import (
	UserModel "Mailer/MainApplication/internal/User/UserModel"
	UserRepository "Mailer/MainApplication/internal/User/UserRepository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserUseCase is a mock of UserUseCase interface
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Signup mocks base method
func (m *MockUserUseCase) Signup(user UserModel.User) (error, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", user)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Signup indicates an expected call of Signup
func (mr *MockUserUseCaseMockRecorder) Signup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserUseCase)(nil).Signup), user)
}

// SignIn mocks base method
func (m *MockUserUseCase) SignIn(user UserModel.User) (error, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn
func (mr *MockUserUseCaseMockRecorder) SignIn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserUseCase)(nil).SignIn), user)
}

// Logout mocks base method
func (m *MockUserUseCase) Logout(sid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", sid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockUserUseCaseMockRecorder) Logout(sid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserUseCase)(nil).Logout), sid)
}

// Profile mocks base method
func (m *MockUserUseCase) Profile(user UserModel.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Profile indicates an expected call of Profile
func (mr *MockUserUseCaseMockRecorder) Profile(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockUserUseCase)(nil).Profile), user)
}

// GetDB mocks base method
func (m *MockUserUseCase) GetDB() UserRepository.UserDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(UserRepository.UserDB)
	return ret0
}

// GetDB indicates an expected call of GetDB
func (mr *MockUserUseCaseMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockUserUseCase)(nil).GetDB))
}
