// Code generated by MockGen. DO NOT EDIT.
// Source: ./mail.pb.go

// Package mock_FileServise is a generated GoMock package.
package mock_FileServiceProto

import (
	FileServise "MainApplication/proto/FileService"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockFileServiceClient is a mock of FileServiceClient interface
type MockFileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceClientMockRecorder
}

// MockFileServiceClientMockRecorder is the mock recorder for MockFileServiceClient
type MockFileServiceClientMockRecorder struct {
	mock *MockFileServiceClient
}

// NewMockFileServiceClient creates a new mock instance
func NewMockFileServiceClient(ctrl *gomock.Controller) *MockFileServiceClient {
	mock := &MockFileServiceClient{ctrl: ctrl}
	mock.recorder = &MockFileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileServiceClient) EXPECT() *MockFileServiceClientMockRecorder {
	return m.recorder
}

// SetAvatar mocks base method
func (m *MockFileServiceClient) SetAvatar(ctx context.Context, in *FileServise.Avatar, opts ...grpc.CallOption) (*FileServise.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAvatar", varargs...)
	ret0, _ := ret[0].(*FileServise.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAvatar indicates an expected call of SetAvatar
func (mr *MockFileServiceClientMockRecorder) SetAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockFileServiceClient)(nil).SetAvatar), varargs...)
}

// GetAvatar mocks base method
func (m *MockFileServiceClient) GetAvatar(ctx context.Context, in *FileServise.User, opts ...grpc.CallOption) (*FileServise.Avatar, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAvatar", varargs...)
	ret0, _ := ret[0].(*FileServise.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar
func (mr *MockFileServiceClientMockRecorder) GetAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockFileServiceClient)(nil).GetAvatar), varargs...)
}

// SaveFiles mocks base method
func (m *MockFileServiceClient) SaveFiles(ctx context.Context, in *FileServise.Files, opts ...grpc.CallOption) (*FileServise.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveFiles", varargs...)
	ret0, _ := ret[0].(*FileServise.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFiles indicates an expected call of SaveFiles
func (mr *MockFileServiceClientMockRecorder) SaveFiles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFiles", reflect.TypeOf((*MockFileServiceClient)(nil).SaveFiles), varargs...)
}

// GetFiles mocks base method
func (m *MockFileServiceClient) GetFiles(ctx context.Context, in *FileServise.LetterId, opts ...grpc.CallOption) (*FileServise.Files, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFiles", varargs...)
	ret0, _ := ret[0].(*FileServise.Files)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles
func (mr *MockFileServiceClientMockRecorder) GetFiles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockFileServiceClient)(nil).GetFiles), varargs...)
}

// MockFileServiceServer is a mock of FileServiceServer interface
type MockFileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceServerMockRecorder
}

// MockFileServiceServerMockRecorder is the mock recorder for MockFileServiceServer
type MockFileServiceServerMockRecorder struct {
	mock *MockFileServiceServer
}

// NewMockFileServiceServer creates a new mock instance
func NewMockFileServiceServer(ctrl *gomock.Controller) *MockFileServiceServer {
	mock := &MockFileServiceServer{ctrl: ctrl}
	mock.recorder = &MockFileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileServiceServer) EXPECT() *MockFileServiceServerMockRecorder {
	return m.recorder
}

// SetAvatar mocks base method
func (m *MockFileServiceServer) SetAvatar(arg0 context.Context, arg1 *FileServise.Avatar) (*FileServise.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAvatar", arg0, arg1)
	ret0, _ := ret[0].(*FileServise.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAvatar indicates an expected call of SetAvatar
func (mr *MockFileServiceServerMockRecorder) SetAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAvatar", reflect.TypeOf((*MockFileServiceServer)(nil).SetAvatar), arg0, arg1)
}

// GetAvatar mocks base method
func (m *MockFileServiceServer) GetAvatar(arg0 context.Context, arg1 *FileServise.User) (*FileServise.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", arg0, arg1)
	ret0, _ := ret[0].(*FileServise.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar
func (mr *MockFileServiceServerMockRecorder) GetAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockFileServiceServer)(nil).GetAvatar), arg0, arg1)
}

// SaveFiles mocks base method
func (m *MockFileServiceServer) SaveFiles(arg0 context.Context, arg1 *FileServise.Files) (*FileServise.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFiles", arg0, arg1)
	ret0, _ := ret[0].(*FileServise.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFiles indicates an expected call of SaveFiles
func (mr *MockFileServiceServerMockRecorder) SaveFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFiles", reflect.TypeOf((*MockFileServiceServer)(nil).SaveFiles), arg0, arg1)
}

// GetFiles mocks base method
func (m *MockFileServiceServer) GetFiles(arg0 context.Context, arg1 *FileServise.LetterId) (*FileServise.Files, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", arg0, arg1)
	ret0, _ := ret[0].(*FileServise.Files)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles
func (mr *MockFileServiceServerMockRecorder) GetFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockFileServiceServer)(nil).GetFiles), arg0, arg1)
}
