// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.pb.go

// Package mock_userService is a generated GoMock package.
package mock_userService

import (
	userService "Mailer/UserService/proto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockUserServiceClient is a mock of UserServiceClient interface
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// IsEmailExists mocks base method
func (m *MockUserServiceClient) IsEmailExists(ctx context.Context, in *userService.Email, opts ...grpc.CallOption) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsEmailExists", varargs...)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailExists indicates an expected call of IsEmailExists
func (mr *MockUserServiceClientMockRecorder) IsEmailExists(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailExists", reflect.TypeOf((*MockUserServiceClient)(nil).IsEmailExists), varargs...)
}

// AddSession mocks base method
func (m *MockUserServiceClient) AddSession(ctx context.Context, in *userService.AddSessionMsg, opts ...grpc.CallOption) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSession", varargs...)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession
func (mr *MockUserServiceClientMockRecorder) AddSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockUserServiceClient)(nil).AddSession), varargs...)
}

// AddUser mocks base method
func (m *MockUserServiceClient) AddUser(ctx context.Context, in *userService.User, opts ...grpc.CallOption) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUser", varargs...)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser
func (mr *MockUserServiceClientMockRecorder) AddUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserServiceClient)(nil).AddUser), varargs...)
}

// GenerateSID mocks base method
func (m *MockUserServiceClient) GenerateSID(ctx context.Context, in *userService.Nothing, opts ...grpc.CallOption) (*userService.Sid, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateSID", varargs...)
	ret0, _ := ret[0].(*userService.Sid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSID indicates an expected call of GenerateSID
func (mr *MockUserServiceClientMockRecorder) GenerateSID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSID", reflect.TypeOf((*MockUserServiceClient)(nil).GenerateSID), varargs...)
}

// GenerateUID mocks base method
func (m *MockUserServiceClient) GenerateUID(ctx context.Context, in *userService.Nothing, opts ...grpc.CallOption) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateUID", varargs...)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUID indicates an expected call of GenerateUID
func (mr *MockUserServiceClientMockRecorder) GenerateUID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUID", reflect.TypeOf((*MockUserServiceClient)(nil).GenerateUID), varargs...)
}

// GetUserByEmail mocks base method
func (m *MockUserServiceClient) GetUserByEmail(ctx context.Context, in *userService.Email, opts ...grpc.CallOption) (*userService.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByEmail", varargs...)
	ret0, _ := ret[0].(*userService.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserServiceClientMockRecorder) GetUserByEmail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByEmail), varargs...)
}

// GetUserByUID mocks base method
func (m *MockUserServiceClient) GetUserByUID(ctx context.Context, in *userService.Uid, opts ...grpc.CallOption) (*userService.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByUID", varargs...)
	ret0, _ := ret[0].(*userService.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUID indicates an expected call of GetUserByUID
func (mr *MockUserServiceClientMockRecorder) GetUserByUID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUID", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByUID), varargs...)
}

// IsOkSession mocks base method
func (m *MockUserServiceClient) IsOkSession(ctx context.Context, in *userService.Sid, opts ...grpc.CallOption) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsOkSession", varargs...)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOkSession indicates an expected call of IsOkSession
func (mr *MockUserServiceClientMockRecorder) IsOkSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOkSession", reflect.TypeOf((*MockUserServiceClient)(nil).IsOkSession), varargs...)
}

// UpdateProfile mocks base method
func (m *MockUserServiceClient) UpdateProfile(ctx context.Context, in *userService.UpdateProfileMsg, opts ...grpc.CallOption) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockUserServiceClientMockRecorder) UpdateProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateProfile), varargs...)
}

// RemoveSession mocks base method
func (m *MockUserServiceClient) RemoveSession(ctx context.Context, in *userService.Sid, opts ...grpc.CallOption) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSession", varargs...)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSession indicates an expected call of RemoveSession
func (mr *MockUserServiceClientMockRecorder) RemoveSession(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockUserServiceClient)(nil).RemoveSession), varargs...)
}

// GetSessionByUID mocks base method
func (m *MockUserServiceClient) GetSessionByUID(ctx context.Context, in *userService.Uid, opts ...grpc.CallOption) (*userService.Sid, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSessionByUID", varargs...)
	ret0, _ := ret[0].(*userService.Sid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUID indicates an expected call of GetSessionByUID
func (mr *MockUserServiceClientMockRecorder) GetSessionByUID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUID", reflect.TypeOf((*MockUserServiceClient)(nil).GetSessionByUID), varargs...)
}

// GetFolderId mocks base method
func (m *MockUserServiceClient) GetFolderId(ctx context.Context, in *userService.Folder, opts ...grpc.CallOption) (*userService.FolderId, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFolderId", varargs...)
	ret0, _ := ret[0].(*userService.FolderId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderId indicates an expected call of GetFolderId
func (mr *MockUserServiceClientMockRecorder) GetFolderId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderId", reflect.TypeOf((*MockUserServiceClient)(nil).GetFolderId), varargs...)
}

// CreateFolder mocks base method
func (m *MockUserServiceClient) CreateFolder(ctx context.Context, in *userService.Folder, opts ...grpc.CallOption) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFolder", varargs...)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder
func (mr *MockUserServiceClientMockRecorder) CreateFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockUserServiceClient)(nil).CreateFolder), varargs...)
}

// RenameFolder mocks base method
func (m *MockUserServiceClient) RenameFolder(ctx context.Context, in *userService.RenameFolderMsg, opts ...grpc.CallOption) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RenameFolder", varargs...)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameFolder indicates an expected call of RenameFolder
func (mr *MockUserServiceClientMockRecorder) RenameFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockUserServiceClient)(nil).RenameFolder), varargs...)
}

// RemoveFolder mocks base method
func (m *MockUserServiceClient) RemoveFolder(ctx context.Context, in *userService.Folder, opts ...grpc.CallOption) (*userService.FolderId, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFolder", varargs...)
	ret0, _ := ret[0].(*userService.FolderId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFolder indicates an expected call of RemoveFolder
func (mr *MockUserServiceClientMockRecorder) RemoveFolder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFolder", reflect.TypeOf((*MockUserServiceClient)(nil).RemoveFolder), varargs...)
}

// GetFoldersList mocks base method
func (m *MockUserServiceClient) GetFoldersList(ctx context.Context, in *userService.FolderUidType, opts ...grpc.CallOption) (*userService.FolderList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFoldersList", varargs...)
	ret0, _ := ret[0].(*userService.FolderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoldersList indicates an expected call of GetFoldersList
func (mr *MockUserServiceClientMockRecorder) GetFoldersList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersList", reflect.TypeOf((*MockUserServiceClient)(nil).GetFoldersList), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// IsEmailExists mocks base method
func (m *MockUserServiceServer) IsEmailExists(arg0 context.Context, arg1 *userService.Email) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailExists", arg0, arg1)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailExists indicates an expected call of IsEmailExists
func (mr *MockUserServiceServerMockRecorder) IsEmailExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailExists", reflect.TypeOf((*MockUserServiceServer)(nil).IsEmailExists), arg0, arg1)
}

// AddSession mocks base method
func (m *MockUserServiceServer) AddSession(arg0 context.Context, arg1 *userService.AddSessionMsg) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", arg0, arg1)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession
func (mr *MockUserServiceServerMockRecorder) AddSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockUserServiceServer)(nil).AddSession), arg0, arg1)
}

// AddUser mocks base method
func (m *MockUserServiceServer) AddUser(arg0 context.Context, arg1 *userService.User) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser
func (mr *MockUserServiceServerMockRecorder) AddUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserServiceServer)(nil).AddUser), arg0, arg1)
}

// GenerateSID mocks base method
func (m *MockUserServiceServer) GenerateSID(arg0 context.Context, arg1 *userService.Nothing) (*userService.Sid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSID", arg0, arg1)
	ret0, _ := ret[0].(*userService.Sid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSID indicates an expected call of GenerateSID
func (mr *MockUserServiceServerMockRecorder) GenerateSID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSID", reflect.TypeOf((*MockUserServiceServer)(nil).GenerateSID), arg0, arg1)
}

// GenerateUID mocks base method
func (m *MockUserServiceServer) GenerateUID(arg0 context.Context, arg1 *userService.Nothing) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUID", arg0, arg1)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUID indicates an expected call of GenerateUID
func (mr *MockUserServiceServerMockRecorder) GenerateUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUID", reflect.TypeOf((*MockUserServiceServer)(nil).GenerateUID), arg0, arg1)
}

// GetUserByEmail mocks base method
func (m *MockUserServiceServer) GetUserByEmail(arg0 context.Context, arg1 *userService.Email) (*userService.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*userService.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserServiceServerMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUID mocks base method
func (m *MockUserServiceServer) GetUserByUID(arg0 context.Context, arg1 *userService.Uid) (*userService.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUID", arg0, arg1)
	ret0, _ := ret[0].(*userService.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUID indicates an expected call of GetUserByUID
func (mr *MockUserServiceServerMockRecorder) GetUserByUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUID", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByUID), arg0, arg1)
}

// IsOkSession mocks base method
func (m *MockUserServiceServer) IsOkSession(arg0 context.Context, arg1 *userService.Sid) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOkSession", arg0, arg1)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOkSession indicates an expected call of IsOkSession
func (mr *MockUserServiceServerMockRecorder) IsOkSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOkSession", reflect.TypeOf((*MockUserServiceServer)(nil).IsOkSession), arg0, arg1)
}

// UpdateProfile mocks base method
func (m *MockUserServiceServer) UpdateProfile(arg0 context.Context, arg1 *userService.UpdateProfileMsg) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockUserServiceServerMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateProfile), arg0, arg1)
}

// RemoveSession mocks base method
func (m *MockUserServiceServer) RemoveSession(arg0 context.Context, arg1 *userService.Sid) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", arg0, arg1)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSession indicates an expected call of RemoveSession
func (mr *MockUserServiceServerMockRecorder) RemoveSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockUserServiceServer)(nil).RemoveSession), arg0, arg1)
}

// GetSessionByUID mocks base method
func (m *MockUserServiceServer) GetSessionByUID(arg0 context.Context, arg1 *userService.Uid) (*userService.Sid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUID", arg0, arg1)
	ret0, _ := ret[0].(*userService.Sid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUID indicates an expected call of GetSessionByUID
func (mr *MockUserServiceServerMockRecorder) GetSessionByUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUID", reflect.TypeOf((*MockUserServiceServer)(nil).GetSessionByUID), arg0, arg1)
}

// GetFolderId mocks base method
func (m *MockUserServiceServer) GetFolderId(arg0 context.Context, arg1 *userService.Folder) (*userService.FolderId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderId", arg0, arg1)
	ret0, _ := ret[0].(*userService.FolderId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderId indicates an expected call of GetFolderId
func (mr *MockUserServiceServerMockRecorder) GetFolderId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderId", reflect.TypeOf((*MockUserServiceServer)(nil).GetFolderId), arg0, arg1)
}

// CreateFolder mocks base method
func (m *MockUserServiceServer) CreateFolder(arg0 context.Context, arg1 *userService.Folder) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", arg0, arg1)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder
func (mr *MockUserServiceServerMockRecorder) CreateFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockUserServiceServer)(nil).CreateFolder), arg0, arg1)
}

// RenameFolder mocks base method
func (m *MockUserServiceServer) RenameFolder(arg0 context.Context, arg1 *userService.RenameFolderMsg) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", arg0, arg1)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameFolder indicates an expected call of RenameFolder
func (mr *MockUserServiceServerMockRecorder) RenameFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockUserServiceServer)(nil).RenameFolder), arg0, arg1)
}

// RemoveFolder mocks base method
func (m *MockUserServiceServer) RemoveFolder(arg0 context.Context, arg1 *userService.Folder) (*userService.FolderId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFolder", arg0, arg1)
	ret0, _ := ret[0].(*userService.FolderId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFolder indicates an expected call of RemoveFolder
func (mr *MockUserServiceServerMockRecorder) RemoveFolder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFolder", reflect.TypeOf((*MockUserServiceServer)(nil).RemoveFolder), arg0, arg1)
}

// GetFoldersList mocks base method
func (m *MockUserServiceServer) GetFoldersList(arg0 context.Context, arg1 *userService.FolderUidType) (*userService.FolderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoldersList", arg0, arg1)
	ret0, _ := ret[0].(*userService.FolderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoldersList indicates an expected call of GetFoldersList
func (mr *MockUserServiceServerMockRecorder) GetFoldersList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersList", reflect.TypeOf((*MockUserServiceServer)(nil).GetFoldersList), arg0, arg1)
}
