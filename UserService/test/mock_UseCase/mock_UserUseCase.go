// Code generated by MockGen. DO NOT EDIT.
// Source: UserUseCase.go

// Package mock_UserUseCase is a generated GoMock package.
package mock_UserUseCase

import (
	userService "Mailer/UserService/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// IsEmailExists mocks base method
func (m *MockInterface) IsEmailExists(arg0 *userService.Email) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailExists", arg0)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailExists indicates an expected call of IsEmailExists
func (mr *MockInterfaceMockRecorder) IsEmailExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailExists", reflect.TypeOf((*MockInterface)(nil).IsEmailExists), arg0)
}

// AddSession mocks base method
func (m *MockInterface) AddSession(arg0 *userService.AddSessionMsg) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", arg0)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession
func (mr *MockInterfaceMockRecorder) AddSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockInterface)(nil).AddSession), arg0)
}

// AddUser mocks base method
func (m *MockInterface) AddUser(arg0 *userService.User) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser
func (mr *MockInterfaceMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockInterface)(nil).AddUser), arg0)
}

// GenerateSID mocks base method
func (m *MockInterface) GenerateSID(arg0 *userService.Nothing) (*userService.Sid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSID", arg0)
	ret0, _ := ret[0].(*userService.Sid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSID indicates an expected call of GenerateSID
func (mr *MockInterfaceMockRecorder) GenerateSID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSID", reflect.TypeOf((*MockInterface)(nil).GenerateSID), arg0)
}

// GenerateUID mocks base method
func (m *MockInterface) GenerateUID(arg0 *userService.Nothing) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUID", arg0)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUID indicates an expected call of GenerateUID
func (mr *MockInterfaceMockRecorder) GenerateUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUID", reflect.TypeOf((*MockInterface)(nil).GenerateUID), arg0)
}

// GetUserByEmail mocks base method
func (m *MockInterface) GetUserByEmail(arg0 *userService.Email) (*userService.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*userService.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockInterfaceMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockInterface)(nil).GetUserByEmail), arg0)
}

// GetUserByUID mocks base method
func (m *MockInterface) GetUserByUID(arg0 *userService.Uid) (*userService.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUID", arg0)
	ret0, _ := ret[0].(*userService.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUID indicates an expected call of GetUserByUID
func (mr *MockInterfaceMockRecorder) GetUserByUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUID", reflect.TypeOf((*MockInterface)(nil).GetUserByUID), arg0)
}

// IsOkSession mocks base method
func (m *MockInterface) IsOkSession(arg0 *userService.Sid) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOkSession", arg0)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOkSession indicates an expected call of IsOkSession
func (mr *MockInterfaceMockRecorder) IsOkSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOkSession", reflect.TypeOf((*MockInterface)(nil).IsOkSession), arg0)
}

// UpdateProfile mocks base method
func (m *MockInterface) UpdateProfile(arg0 *userService.UpdateProfileMsg) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile
func (mr *MockInterfaceMockRecorder) UpdateProfile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockInterface)(nil).UpdateProfile), arg0)
}

// RemoveSession mocks base method
func (m *MockInterface) RemoveSession(arg0 *userService.Sid) (*userService.Uid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", arg0)
	ret0, _ := ret[0].(*userService.Uid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSession indicates an expected call of RemoveSession
func (mr *MockInterfaceMockRecorder) RemoveSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockInterface)(nil).RemoveSession), arg0)
}

// GetSessionByUID mocks base method
func (m *MockInterface) GetSessionByUID(arg0 *userService.Uid) (*userService.Sid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUID", arg0)
	ret0, _ := ret[0].(*userService.Sid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUID indicates an expected call of GetSessionByUID
func (mr *MockInterfaceMockRecorder) GetSessionByUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUID", reflect.TypeOf((*MockInterface)(nil).GetSessionByUID), arg0)
}

// GetFolderId mocks base method
func (m *MockInterface) GetFolderId(arg0 *userService.Folder) (*userService.FolderId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderId", arg0)
	ret0, _ := ret[0].(*userService.FolderId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderId indicates an expected call of GetFolderId
func (mr *MockInterfaceMockRecorder) GetFolderId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderId", reflect.TypeOf((*MockInterface)(nil).GetFolderId), arg0)
}

// CreateFolder mocks base method
func (m *MockInterface) CreateFolder(arg0 *userService.Folder) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", arg0)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder
func (mr *MockInterfaceMockRecorder) CreateFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockInterface)(nil).CreateFolder), arg0)
}

// RenameFolder mocks base method
func (m *MockInterface) RenameFolder(arg0 *userService.RenameFolderMsg) (*userService.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFolder", arg0)
	ret0, _ := ret[0].(*userService.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameFolder indicates an expected call of RenameFolder
func (mr *MockInterfaceMockRecorder) RenameFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFolder", reflect.TypeOf((*MockInterface)(nil).RenameFolder), arg0)
}

// RemoveFolder mocks base method
func (m *MockInterface) RemoveFolder(arg0 *userService.Folder) (*userService.FolderId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFolder", arg0)
	ret0, _ := ret[0].(*userService.FolderId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFolder indicates an expected call of RemoveFolder
func (mr *MockInterfaceMockRecorder) RemoveFolder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFolder", reflect.TypeOf((*MockInterface)(nil).RemoveFolder), arg0)
}

// GetFoldersList mocks base method
func (m *MockInterface) GetFoldersList(arg0 *userService.FolderUidType) (*userService.FolderList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoldersList", arg0)
	ret0, _ := ret[0].(*userService.FolderList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoldersList indicates an expected call of GetFoldersList
func (mr *MockInterfaceMockRecorder) GetFoldersList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersList", reflect.TypeOf((*MockInterface)(nil).GetFoldersList), arg0)
}
