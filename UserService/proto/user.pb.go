// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: UserService/proto/user.proto

// protoc --go_out=plugins=grpc:. *.proto
//go:generate mockgen -source=./user.pb.go -destination=../test/mock_UserService/UserServiceMock.go

package userService

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session uint64 `protobuf:"varint,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetSession() uint64 {
	if x != nil {
		return x.Session
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Surname  string `protobuf:"bytes,3,opt,name=surname,proto3" json:"surname,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Uid      uint64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetSurname() string {
	if x != nil {
		return x.Surname
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{2}
}

func (x *Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy bool `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{3}
}

func (x *Nothing) GetDummy() bool {
	if x != nil {
		return x.Dummy
	}
	return false
}

type Sid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *Sid) Reset() {
	*x = Sid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sid) ProtoMessage() {}

func (x *Sid) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sid.ProtoReflect.Descriptor instead.
func (*Sid) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{4}
}

func (x *Sid) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type Uid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *Uid) Reset() {
	*x = Uid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uid) ProtoMessage() {}

func (x *Uid) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uid.ProtoReflect.Descriptor instead.
func (*Uid) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{5}
}

func (x *Uid) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type AddSessionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid  string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	User *User  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AddSessionMsg) Reset() {
	*x = AddSessionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSessionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSessionMsg) ProtoMessage() {}

func (x *AddSessionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSessionMsg.ProtoReflect.Descriptor instead.
func (*AddSessionMsg) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{6}
}

func (x *AddSessionMsg) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *AddSessionMsg) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateProfileMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewUser *User  `protobuf:"bytes,1,opt,name=newUser,proto3" json:"newUser,omitempty"`
	Email   string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *UpdateProfileMsg) Reset() {
	*x = UpdateProfileMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileMsg) ProtoMessage() {}

func (x *UpdateProfileMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileMsg.ProtoReflect.Descriptor instead.
func (*UpdateProfileMsg) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateProfileMsg) GetNewUser() *User {
	if x != nil {
		return x.NewUser
	}
	return nil
}

func (x *UpdateProfileMsg) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Folder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Uid  uint64 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Id   uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Folder) Reset() {
	*x = Folder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Folder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Folder) ProtoMessage() {}

func (x *Folder) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Folder.ProtoReflect.Descriptor instead.
func (*Folder) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{8}
}

func (x *Folder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Folder) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Folder) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Folder) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FolderId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FolderId) Reset() {
	*x = FolderId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderId) ProtoMessage() {}

func (x *FolderId) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderId.ProtoReflect.Descriptor instead.
func (*FolderId) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{9}
}

func (x *FolderId) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RenameFolderMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	OldName string `protobuf:"bytes,3,opt,name=oldName,proto3" json:"oldName,omitempty"`
	NewName string `protobuf:"bytes,4,opt,name=newName,proto3" json:"newName,omitempty"`
}

func (x *RenameFolderMsg) Reset() {
	*x = RenameFolderMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameFolderMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameFolderMsg) ProtoMessage() {}

func (x *RenameFolderMsg) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameFolderMsg.ProtoReflect.Descriptor instead.
func (*RenameFolderMsg) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{10}
}

func (x *RenameFolderMsg) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *RenameFolderMsg) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RenameFolderMsg) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameFolderMsg) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type FolderNameType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FolderNameType) Reset() {
	*x = FolderNameType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderNameType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderNameType) ProtoMessage() {}

func (x *FolderNameType) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderNameType.ProtoReflect.Descriptor instead.
func (*FolderNameType) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{11}
}

func (x *FolderNameType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FolderNameType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type FolderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res []*Folder `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
}

func (x *FolderList) Reset() {
	*x = FolderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderList) ProtoMessage() {}

func (x *FolderList) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderList.ProtoReflect.Descriptor instead.
func (*FolderList) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{12}
}

func (x *FolderList) GetRes() []*Folder {
	if x != nil {
		return x.Res
	}
	return nil
}

type FolderUidType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid  uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FolderUidType) Reset() {
	*x = FolderUidType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_UserService_proto_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderUidType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderUidType) ProtoMessage() {}

func (x *FolderUidType) ProtoReflect() protoreflect.Message {
	mi := &file_UserService_proto_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderUidType.ProtoReflect.Descriptor instead.
func (*FolderUidType) Descriptor() ([]byte, []int) {
	return file_UserService_proto_user_proto_rawDescGZIP(), []int{13}
}

func (x *FolderUidType) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FolderUidType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_UserService_proto_user_proto protoreflect.FileDescriptor

var file_UserService_proto_user_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x23, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x78, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x1f, 0x0a, 0x07, 0x4e, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x17, 0x0a, 0x03, 0x53, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x03, 0x55, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x07, 0x6e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x52, 0x0a,
	0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a,
	0x0f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x0d, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x32, 0xba, 0x07, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x0d, 0x49, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12,
	0x35, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x49, 0x44, 0x12, 0x14,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x55, 0x49, 0x44, 0x12, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x55, 0x49, 0x44, 0x12, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0b, 0x49,
	0x73, 0x4f, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x1a, 0x10, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x14,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x64, 0x1a, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x49, 0x44, 0x12, 0x10, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x69, 0x64, 0x1a, 0x10,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x1a, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x1a,
	0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_UserService_proto_user_proto_rawDescOnce sync.Once
	file_UserService_proto_user_proto_rawDescData = file_UserService_proto_user_proto_rawDesc
)

func file_UserService_proto_user_proto_rawDescGZIP() []byte {
	file_UserService_proto_user_proto_rawDescOnce.Do(func() {
		file_UserService_proto_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_UserService_proto_user_proto_rawDescData)
	})
	return file_UserService_proto_user_proto_rawDescData
}

var file_UserService_proto_user_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_UserService_proto_user_proto_goTypes = []interface{}{
	(*Session)(nil),          // 0: userService.Session
	(*User)(nil),             // 1: userService.User
	(*Email)(nil),            // 2: userService.Email
	(*Nothing)(nil),          // 3: userService.Nothing
	(*Sid)(nil),              // 4: userService.Sid
	(*Uid)(nil),              // 5: userService.Uid
	(*AddSessionMsg)(nil),    // 6: userService.AddSessionMsg
	(*UpdateProfileMsg)(nil), // 7: userService.UpdateProfileMsg
	(*Folder)(nil),           // 8: userService.Folder
	(*FolderId)(nil),         // 9: userService.FolderId
	(*RenameFolderMsg)(nil),  // 10: userService.RenameFolderMsg
	(*FolderNameType)(nil),   // 11: userService.FolderNameType
	(*FolderList)(nil),       // 12: userService.FolderList
	(*FolderUidType)(nil),    // 13: userService.FolderUidType
}
var file_UserService_proto_user_proto_depIdxs = []int32{
	1,  // 0: userService.AddSessionMsg.user:type_name -> userService.User
	1,  // 1: userService.UpdateProfileMsg.newUser:type_name -> userService.User
	8,  // 2: userService.FolderList.res:type_name -> userService.Folder
	2,  // 3: userService.UserService.IsEmailExists:input_type -> userService.Email
	6,  // 4: userService.UserService.AddSession:input_type -> userService.AddSessionMsg
	1,  // 5: userService.UserService.AddUser:input_type -> userService.User
	3,  // 6: userService.UserService.GenerateSID:input_type -> userService.Nothing
	3,  // 7: userService.UserService.GenerateUID:input_type -> userService.Nothing
	2,  // 8: userService.UserService.GetUserByEmail:input_type -> userService.Email
	5,  // 9: userService.UserService.GetUserByUID:input_type -> userService.Uid
	4,  // 10: userService.UserService.IsOkSession:input_type -> userService.Sid
	7,  // 11: userService.UserService.UpdateProfile:input_type -> userService.UpdateProfileMsg
	4,  // 12: userService.UserService.RemoveSession:input_type -> userService.Sid
	5,  // 13: userService.UserService.GetSessionByUID:input_type -> userService.Uid
	8,  // 14: userService.UserService.GetFolderId:input_type -> userService.Folder
	8,  // 15: userService.UserService.CreateFolder:input_type -> userService.Folder
	10, // 16: userService.UserService.RenameFolder:input_type -> userService.RenameFolderMsg
	8,  // 17: userService.UserService.RemoveFolder:input_type -> userService.Folder
	13, // 18: userService.UserService.GetFoldersList:input_type -> userService.FolderUidType
	3,  // 19: userService.UserService.IsEmailExists:output_type -> userService.Nothing
	3,  // 20: userService.UserService.AddSession:output_type -> userService.Nothing
	3,  // 21: userService.UserService.AddUser:output_type -> userService.Nothing
	4,  // 22: userService.UserService.GenerateSID:output_type -> userService.Sid
	5,  // 23: userService.UserService.GenerateUID:output_type -> userService.Uid
	1,  // 24: userService.UserService.GetUserByEmail:output_type -> userService.User
	1,  // 25: userService.UserService.GetUserByUID:output_type -> userService.User
	5,  // 26: userService.UserService.IsOkSession:output_type -> userService.Uid
	3,  // 27: userService.UserService.UpdateProfile:output_type -> userService.Nothing
	5,  // 28: userService.UserService.RemoveSession:output_type -> userService.Uid
	4,  // 29: userService.UserService.GetSessionByUID:output_type -> userService.Sid
	9,  // 30: userService.UserService.GetFolderId:output_type -> userService.FolderId
	3,  // 31: userService.UserService.CreateFolder:output_type -> userService.Nothing
	3,  // 32: userService.UserService.RenameFolder:output_type -> userService.Nothing
	9,  // 33: userService.UserService.RemoveFolder:output_type -> userService.FolderId
	12, // 34: userService.UserService.GetFoldersList:output_type -> userService.FolderList
	19, // [19:35] is the sub-list for method output_type
	3,  // [3:19] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_UserService_proto_user_proto_init() }
func file_UserService_proto_user_proto_init() {
	if File_UserService_proto_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_UserService_proto_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSessionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Folder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameFolderMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderNameType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_UserService_proto_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderUidType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_UserService_proto_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_UserService_proto_user_proto_goTypes,
		DependencyIndexes: file_UserService_proto_user_proto_depIdxs,
		MessageInfos:      file_UserService_proto_user_proto_msgTypes,
	}.Build()
	File_UserService_proto_user_proto = out.File
	file_UserService_proto_user_proto_rawDesc = nil
	file_UserService_proto_user_proto_goTypes = nil
	file_UserService_proto_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	IsEmailExists(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Nothing, error)
	AddSession(ctx context.Context, in *AddSessionMsg, opts ...grpc.CallOption) (*Nothing, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Nothing, error)
	GenerateSID(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Sid, error)
	GenerateUID(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Uid, error)
	GetUserByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*User, error)
	GetUserByUID(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*User, error)
	IsOkSession(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Uid, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileMsg, opts ...grpc.CallOption) (*Nothing, error)
	RemoveSession(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Uid, error)
	GetSessionByUID(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Sid, error)
	GetFolderId(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*FolderId, error)
	CreateFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Nothing, error)
	RenameFolder(ctx context.Context, in *RenameFolderMsg, opts ...grpc.CallOption) (*Nothing, error)
	RemoveFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*FolderId, error)
	GetFoldersList(ctx context.Context, in *FolderUidType, opts ...grpc.CallOption) (*FolderList, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) IsEmailExists(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/userService.UserService/IsEmailExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddSession(ctx context.Context, in *AddSessionMsg, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/userService.UserService/AddSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/userService.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GenerateSID(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Sid, error) {
	out := new(Sid)
	err := c.cc.Invoke(ctx, "/userService.UserService/GenerateSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GenerateUID(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Uid, error) {
	out := new(Uid)
	err := c.cc.Invoke(ctx, "/userService.UserService/GenerateUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByUID(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetUserByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsOkSession(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Uid, error) {
	out := new(Uid)
	err := c.cc.Invoke(ctx, "/userService.UserService/IsOkSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileMsg, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/userService.UserService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveSession(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Uid, error) {
	out := new(Uid)
	err := c.cc.Invoke(ctx, "/userService.UserService/RemoveSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSessionByUID(ctx context.Context, in *Uid, opts ...grpc.CallOption) (*Sid, error) {
	out := new(Sid)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetSessionByUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFolderId(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*FolderId, error) {
	out := new(FolderId)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetFolderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/userService.UserService/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RenameFolder(ctx context.Context, in *RenameFolderMsg, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/userService.UserService/RenameFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveFolder(ctx context.Context, in *Folder, opts ...grpc.CallOption) (*FolderId, error) {
	out := new(FolderId)
	err := c.cc.Invoke(ctx, "/userService.UserService/RemoveFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFoldersList(ctx context.Context, in *FolderUidType, opts ...grpc.CallOption) (*FolderList, error) {
	out := new(FolderList)
	err := c.cc.Invoke(ctx, "/userService.UserService/GetFoldersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	IsEmailExists(context.Context, *Email) (*Nothing, error)
	AddSession(context.Context, *AddSessionMsg) (*Nothing, error)
	AddUser(context.Context, *User) (*Nothing, error)
	GenerateSID(context.Context, *Nothing) (*Sid, error)
	GenerateUID(context.Context, *Nothing) (*Uid, error)
	GetUserByEmail(context.Context, *Email) (*User, error)
	GetUserByUID(context.Context, *Uid) (*User, error)
	IsOkSession(context.Context, *Sid) (*Uid, error)
	UpdateProfile(context.Context, *UpdateProfileMsg) (*Nothing, error)
	RemoveSession(context.Context, *Sid) (*Uid, error)
	GetSessionByUID(context.Context, *Uid) (*Sid, error)
	GetFolderId(context.Context, *Folder) (*FolderId, error)
	CreateFolder(context.Context, *Folder) (*Nothing, error)
	RenameFolder(context.Context, *RenameFolderMsg) (*Nothing, error)
	RemoveFolder(context.Context, *Folder) (*FolderId, error)
	GetFoldersList(context.Context, *FolderUidType) (*FolderList, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) IsEmailExists(context.Context, *Email) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmailExists not implemented")
}
func (*UnimplementedUserServiceServer) AddSession(context.Context, *AddSessionMsg) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSession not implemented")
}
func (*UnimplementedUserServiceServer) AddUser(context.Context, *User) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedUserServiceServer) GenerateSID(context.Context, *Nothing) (*Sid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSID not implemented")
}
func (*UnimplementedUserServiceServer) GenerateUID(context.Context, *Nothing) (*Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUID not implemented")
}
func (*UnimplementedUserServiceServer) GetUserByEmail(context.Context, *Email) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (*UnimplementedUserServiceServer) GetUserByUID(context.Context, *Uid) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUID not implemented")
}
func (*UnimplementedUserServiceServer) IsOkSession(context.Context, *Sid) (*Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOkSession not implemented")
}
func (*UnimplementedUserServiceServer) UpdateProfile(context.Context, *UpdateProfileMsg) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedUserServiceServer) RemoveSession(context.Context, *Sid) (*Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (*UnimplementedUserServiceServer) GetSessionByUID(context.Context, *Uid) (*Sid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByUID not implemented")
}
func (*UnimplementedUserServiceServer) GetFolderId(context.Context, *Folder) (*FolderId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolderId not implemented")
}
func (*UnimplementedUserServiceServer) CreateFolder(context.Context, *Folder) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (*UnimplementedUserServiceServer) RenameFolder(context.Context, *RenameFolderMsg) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFolder not implemented")
}
func (*UnimplementedUserServiceServer) RemoveFolder(context.Context, *Folder) (*FolderId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFolder not implemented")
}
func (*UnimplementedUserServiceServer) GetFoldersList(context.Context, *FolderUidType) (*FolderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoldersList not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_IsEmailExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsEmailExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/IsEmailExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsEmailExists(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSessionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/AddSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddSession(ctx, req.(*AddSessionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GenerateSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GenerateSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GenerateSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GenerateSID(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GenerateUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GenerateUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GenerateUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GenerateUID(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetUserByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByUID(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsOkSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsOkSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/IsOkSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsOkSession(ctx, req.(*Sid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateProfile(ctx, req.(*UpdateProfileMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/RemoveSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveSession(ctx, req.(*Sid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSessionByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSessionByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetSessionByUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSessionByUID(ctx, req.(*Uid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFolderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFolderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetFolderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFolderId(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RenameFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFolderMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RenameFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/RenameFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RenameFolder(ctx, req.(*RenameFolderMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Folder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/RemoveFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveFolder(ctx, req.(*Folder))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFoldersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderUidType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFoldersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userService.UserService/GetFoldersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFoldersList(ctx, req.(*FolderUidType))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userService.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsEmailExists",
			Handler:    _UserService_IsEmailExists_Handler,
		},
		{
			MethodName: "AddSession",
			Handler:    _UserService_AddSession_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "GenerateSID",
			Handler:    _UserService_GenerateSID_Handler,
		},
		{
			MethodName: "GenerateUID",
			Handler:    _UserService_GenerateUID_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _UserService_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUserByUID",
			Handler:    _UserService_GetUserByUID_Handler,
		},
		{
			MethodName: "IsOkSession",
			Handler:    _UserService_IsOkSession_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UserService_UpdateProfile_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _UserService_RemoveSession_Handler,
		},
		{
			MethodName: "GetSessionByUID",
			Handler:    _UserService_GetSessionByUID_Handler,
		},
		{
			MethodName: "GetFolderId",
			Handler:    _UserService_GetFolderId_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _UserService_CreateFolder_Handler,
		},
		{
			MethodName: "RenameFolder",
			Handler:    _UserService_RenameFolder_Handler,
		},
		{
			MethodName: "RemoveFolder",
			Handler:    _UserService_RemoveFolder_Handler,
		},
		{
			MethodName: "GetFoldersList",
			Handler:    _UserService_GetFoldersList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "UserService/proto/user.proto",
}
