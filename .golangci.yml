# This file contains all available configuration options
# with their default values.
# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m
  # include test files or not, default is true
  tests: true

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work
  # on Windows.
  skip-dirs:
    - /.*/proto
    - /.*/mock.*
  skip-files:
    - /.*/.*_test.go
      # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number
  # sorts results by: filepath, line and column
  sort-results: true
# all available settings of specific linters
linters-settings:

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  goheader:
    values:
      const:
      # define here const type values in format k:v, for example:
      # YEAR: 2020
      # COMPANY: MY COMPANY
      regexp:
      # define here regexp type values, for example
      # AUTHOR: .*@mycompany\.com
    template:
    # put here copyright header template for source code files, for example:
    #    {{ AUTHOR }} {{ COMPANY }} {{ YEAR }}
    #    SPDX-License-Identifier: Apache-2.0
    #
    #    Licensed under the Apache License, Version 2.0 (the "License");
    #    you may not use this file except in compliance with the License.
    #    You may obtain a copy of the License at:
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    #    Unless required by applicable law or agreed to in writing, software
    #    distributed under the License is distributed on an "AS IS" BASIS,
    #    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #    See the License for the specific language governing permissions and
    #    limitations under the License.
    template-path:
    # also as alternative of directive 'template' you may put the path to file with the template source

  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  govet:
    # report about shadowed variables
    check-shadowing: true
    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    # enable or disable analyzers by name
    enable:
      - atomic
    enable-all: false
    disable:
      - shadow
    disable-all: false


linters:
  enable:
    - govet

  fast: false
issues:

  exclude-use-default: true

  exclude-case-sensitive: false

  exclude:
    - w.Write(.*)
    - return [^\s]*


  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

