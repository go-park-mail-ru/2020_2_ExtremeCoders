// Code generated by MockGen. DO NOT EDIT.
// Source: repoInterface.go

// Package mock_Repository is a generated GoMock package.
package mock_Repository

import (
	fileService "Mailer/FileService/proto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// SaveFiles mocks base method
func (m *MockInterface) SaveFiles(arg0 *fileService.Files) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFiles indicates an expected call of SaveFiles
func (mr *MockInterfaceMockRecorder) SaveFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFiles", reflect.TypeOf((*MockInterface)(nil).SaveFiles), arg0)
}

// GetFiles mocks base method
func (m *MockInterface) GetFiles(arg0 *fileService.LetterId) (*fileService.Files, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", arg0)
	ret0, _ := ret[0].(*fileService.Files)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles
func (mr *MockInterfaceMockRecorder) GetFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockInterface)(nil).GetFiles), arg0)
}

// SaveAvatar mocks base method
func (m *MockInterface) SaveAvatar(arg0 *fileService.Avatar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAvatar indicates an expected call of SaveAvatar
func (mr *MockInterfaceMockRecorder) SaveAvatar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatar", reflect.TypeOf((*MockInterface)(nil).SaveAvatar), arg0)
}

// GetAvatar mocks base method
func (m *MockInterface) GetAvatar(arg0 *fileService.User) (*fileService.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", arg0)
	ret0, _ := ret[0].(*fileService.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar
func (mr *MockInterfaceMockRecorder) GetAvatar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockInterface)(nil).GetAvatar), arg0)
}

// GetDefaultAvatar mocks base method
func (m *MockInterface) GetDefaultAvatar() (*fileService.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultAvatar")
	ret0, _ := ret[0].(*fileService.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultAvatar indicates an expected call of GetDefaultAvatar
func (mr *MockInterfaceMockRecorder) GetDefaultAvatar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultAvatar", reflect.TypeOf((*MockInterface)(nil).GetDefaultAvatar))
}
