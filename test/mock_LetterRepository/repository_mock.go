// Code generated by MockGen. DO NOT EDIT.
// Source: DataBaseRequests.go

// Package mock_LetterRepository is mock_UserRepository generated GoMock package.
package mock_LetterRepository

import (
	LetterModel "CleanArch/internal/Letter/LetterModel"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLetterDB is mock_UserRepository mock_LetterRepository of LetterDB interface
type MockLetterDB struct {
	ctrl     *gomock.Controller
	recorder *MockLetterDBMockRecorder
}

// MockLetterDBMockRecorder is the mock_LetterRepository recorder for MockLetterDB
type MockLetterDBMockRecorder struct {
	mock *MockLetterDB
}

// NewMockLetterDB creates mock_UserRepository new mock_LetterRepository instance
func NewMockLetterDB(ctrl *gomock.Controller) *MockLetterDB {
	mock := &MockLetterDB{ctrl: ctrl}
	mock.recorder = &MockLetterDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLetterDB) EXPECT() *MockLetterDBMockRecorder {
	return m.recorder
}

// IsUserExist mocks base method
func (m *MockLetterDB) IsUserExist(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUserExist indicates an expected call of IsUserExist
func (mr *MockLetterDBMockRecorder) IsUserExist(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockLetterDB)(nil).IsUserExist), email)
}

// SaveMail mocks base method
func (m *MockLetterDB) SaveMail(arg0 LetterModel.Letter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMail indicates an expected call of SaveMail
func (mr *MockLetterDBMockRecorder) SaveMail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMail", reflect.TypeOf((*MockLetterDB)(nil).SaveMail), arg0)
}

// GetReceivedLetters mocks base method
func (m *MockLetterDB) GetReceivedLetters(arg0 string) (error, []LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivedLetters", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]LetterModel.Letter)
	return ret0, ret1
}

// GetReceivedLetters indicates an expected call of GetReceivedLetters
func (mr *MockLetterDBMockRecorder) GetReceivedLetters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivedLetters", reflect.TypeOf((*MockLetterDB)(nil).GetReceivedLetters), arg0)
}

// GetSendedLetters mocks base method
func (m *MockLetterDB) GetSendedLetters(arg0 string) (error, []LetterModel.Letter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendedLetters", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].([]LetterModel.Letter)
	return ret0, ret1
}

// GetSendedLetters indicates an expected call of GetSendedLetters
func (mr *MockLetterDBMockRecorder) GetSendedLetters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendedLetters", reflect.TypeOf((*MockLetterDB)(nil).GetSendedLetters), arg0)
}

// GenerateLID mocks base method
func (m *MockLetterDB) GenerateLID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateLID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GenerateLID indicates an expected call of GenerateLID
func (mr *MockLetterDBMockRecorder) GenerateLID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateLID", reflect.TypeOf((*MockLetterDB)(nil).GenerateLID))
}
